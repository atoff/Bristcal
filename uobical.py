import os
import re
import time
import secrets
import requests
from shutil import copyfile
from datetime import datetime, date
from icalendar import Calendar, Event
from bs4 import BeautifulSoup as bs

def get_login_token(raw_resp):
    soup = bs(raw_resp.text, 'lxml')
    token = [n.get('value', '') for n in soup.find_all('input')
             if n.get('name', '') == 'lt']
    return token[0]

def get_execution_token(raw_resp):
    soup = bs(raw_resp.text, 'lxml')
    token = [n.get('value', '') for n in soup.find_all('input')
             if n.get('name', '') == 'execution']
    return token[0]

	
def check_details():
    if not os.path.exists("secrets.py"):
        copyfile("secrets.py.example", "secrets.py")
        print("ERROR: Please fill in the secrets.py file")
        exit()
    if not secrets.USERNAME:
        print("ERROR: Please enter your UoB email address into the secrets.py USERNAME field")
        exit()
    if not secrets.PASSWORD:
        print("ERROR: Please enter your UoB password into the secrets.py PASSWORD field")
        exit()
    if not secrets.COURSECODE:
        print("ERROR: Please enter your UoB course ID into the secrets.py COURSENAME field")
        exit()
   
def get_cal_json():
    
    AUTH_PAYLOAD = {'username': secrets.USERNAME, 'password': secrets.PASSWORD, '_eventId' : 'submit'}
    AUTH_ENDPOINT = 'https://sso.bris.ac.uk/sso/login'
    EVENTS_ENDPOINT = 'https://www.bris.ac.uk/timetables/timetable.json?pos='+secrets.COURSECODE
    
    with requests.session() as s:
        # First call to retrieve login & execution tokens
        response = s.get(AUTH_ENDPOINT)
        AUTH_PAYLOAD['lt'] = get_login_token(response)
        AUTH_PAYLOAD['execution'] = get_execution_token(response)
        
        # Perform authentication
        auth_resp = s.post(AUTH_ENDPOINT, data=AUTH_PAYLOAD, headers={'content-type': 'application/x-www-form-urlencoded'})
        
        # Check If Auth Successful
        if auth_resp.status_code == 200 and b"You are signed in" in auth_resp.content:
            print('Successful Auth')
        else:
            print('Auth Failed')
            exit()
			
        # Retrieve Timetable JSON
        now = datetime.now()
        start = str(int(time.mktime(date(now.year,9,1).timetuple())))#&start=1538348400&end=1538866800
        end = str(int(time.mktime(date(now.year+1,9,1).timetuple())))
        url = EVENTS_ENDPOINT+"&start="+start+"&end="+end
        print("Downloading timetable for the academic year " + str(now.year) + "/" + str(now.year+1) + " from " + url)
        cal_resp = s.get(url)
        print("Downloaded. Processing...")
        return cal_resp.json()
        

def json_to_ical(cal_json):
   
    # Setup iCal object
    ical = Calendar()
    # Add required compliance properties
    ical.add('prodid', '-//BristCal//mxm.dk//')
    ical.add('version', '0.9')
    #Iterate through sessions
    for event in cal_json:
        e = Event()
        # Format times
        start = datetime.strptime(event['start'].replace(':', '') , '%Y-%m-%dT%H%M%S.%f%z')
        end = datetime.strptime(event['end'].replace(':', '') , '%Y-%m-%dT%H%M%S.%f%z')
        now = datetime.now()
        # Add Details 
        e.add('summary', event['desc'] + " [" + event['type'] + "]")
        e.add('dtstart', start)
        e.add('dtend', end)
        e.add('dtstamp', now)
        if 'locs' in event:
            e.add('location', event['locs'][0]['locdesc'])
        e.add('uid', event['id'])
        if 'sites' in event:
                e.add('description', event['title'] + ' | ' + event['udesc'] + "\nhttps://www.google.com/maps/search/?api=1&query="+str(event["sites"][0]["lat"])+","+str(event["sites"][0]["lng"]) + "\n\n\nAutomatically Generated By Bristcal")
        else:
            e.add('description', event['title'] + ' | ' + event['udesc'] + "\n\n\nAutomatically Generated By Bristcal")
            
        # Add to iCal
        ical.add_component(e)
    # Save iCal
    path = os.path.join(os.getcwd(), 'UOBTimetable.ics')
    f = open(path, 'wb')
    f.write(ical.to_ical())
    print('Done!\nTimetabled Sessions: ' + len(cal_json).__str__())
    f.close()


def main():
    check_details()
    json_to_ical(get_cal_json())


if __name__ == '__main__':
    main()
    
